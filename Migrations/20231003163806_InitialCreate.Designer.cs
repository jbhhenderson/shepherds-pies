// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShepherdsPies.Data;

#nullable disable

namespace ShepherdsPies.Migrations
{
    [DbContext(typeof(ShepherdsPiesDbContext))]
    [Migration("20231003163806_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "28cd92ae-d328-4266-bdbd-634a53e08f77",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0135738-d7d4-4160-92be-860f156301c0",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMvoo4Nux4RkOCiaPYCUhdn1LQoBnBjH0vIC5dhSPVJHVoGcxAd9VCvxfmqk7fWpoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f38152e-be6e-412b-813c-e5663a0d2192",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "dbc40bc6-1234-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bc32e2d-c0e5-45c2-9a4c-605f7bb1c497",
                            Email = "jackson@henderson.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKaN4jRlLZ1U6lVdK1KZVhypJRiGltNo1nyrwgM16BPMdb44ioVKXr9V6VU8ZFk1KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a678cbc1-75c7-4401-bd27-d3d633412aef",
                            TwoFactorEnabled = false,
                            UserName = "jackson"
                        },
                        new
                        {
                            Id = "dbc40bc6-4567-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "578f3b44-38eb-4cb3-a377-c1efa47962fd",
                            Email = "sam@ward.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPPSxixN1gKccRZG3y+JR27xMjavlmffkTEW1fw9qURYTSPJpZUniXkxDbH8xO2uVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fb39ce7-9604-41c3-9265-77c29703a345",
                            TwoFactorEnabled = false,
                            UserName = "sam"
                        },
                        new
                        {
                            Id = "dbc40bc6-8910-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "829b8f92-d901-41df-aa09-d782a1413128",
                            Email = "will@ward.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEARjVLM5UFQQJO5VvoM6g66yUfA12N0BieASBoih+2TweEuFRL9QFVMjR2bOY07PjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e281e1e-de86-4c5f-9a26-51a5130a37c3",
                            TwoFactorEnabled = false,
                            UserName = "will"
                        },
                        new
                        {
                            Id = "dbc40bc6-1112-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1347b99b-62f6-40e7-8cd9-43d097a844a7",
                            Email = "braxton@smith.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPTcrGWgs8W6nKhFN5Jnr1GrVsu31LHHCzWUo2co6dwcrQCoW5gYddGk4kQIqlmFRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c96dee0-eef4-461e-9fe0-40c51ad4f120",
                            TwoFactorEnabled = false,
                            UserName = "braxton"
                        },
                        new
                        {
                            Id = "dbc40bc6-1314-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b3ee460-ed9f-4381-94b3-47033925ee41",
                            Email = "baker@wright.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEj590ebWrvHeoXl4/f8t9gdLcXcscidXbci7n2rvft2ce/HMjWTsXgCluMsV2B6NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42728ec8-b56f-40ca-a7dd-9613f4022101",
                            TwoFactorEnabled = false,
                            UserName = "baker"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "dbc40bc6-1234-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "dbc40bc6-4567-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "dbc40bc6-8910-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "dbc40bc6-1112-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "dbc40bc6-1314-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShepherdsPies.Models.Cheese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cheeses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Buffalo Mozzarella"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Four Cheese"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None (cheeseless)"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DelivererId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int?>("TableId")
                        .HasColumnType("integer");

                    b.Property<double>("TipAmount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DelivererId = 4,
                            OrderDate = new DateTime(2023, 9, 25, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverId = 2,
                            TipAmount = 4.0
                        },
                        new
                        {
                            Id = 2,
                            DelivererId = 5,
                            OrderDate = new DateTime(2023, 9, 27, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverId = 3,
                            TipAmount = 6.0
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CheeseId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("SauceId")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheeseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SauceId");

                    b.HasIndex("SizeId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheeseId = 2,
                            OrderId = 1,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 2,
                            CheeseId = 1,
                            OrderId = 2,
                            SauceId = 2,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CheeseId = 2,
                            OrderId = 2,
                            SauceId = 1,
                            SizeId = 2
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.PizzaTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PizzaId")
                        .HasColumnType("integer");

                    b.Property<int>("ToppingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaToppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PizzaId = 1,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 2,
                            PizzaId = 1,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 3,
                            PizzaId = 2,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 4,
                            PizzaId = 3,
                            ToppingId = 5
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Marinara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arrabbiata"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Garlic White"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None (sauceless pizza)"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Small (10 inches)",
                            Price = 10.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium (14 inches)",
                            Price = 12.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Large (18 inches)",
                            Price = 15.0
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sausage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pepperoni"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mushroom"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Onion"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green Pepper"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Black Olive"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Basil"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Extra Cheese"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "123 Main Street",
                            FirstName = "Jackson",
                            IdentityUserId = "dbc40bc6-1234-4ac5-a3ed-180f5e916a5f",
                            LastName = "Henderson"
                        },
                        new
                        {
                            Id = 3,
                            Address = "456 Main Street",
                            FirstName = "Sam",
                            IdentityUserId = "dbc40bc6-4567-4ac5-a3ed-180f5e916a5f",
                            LastName = "Ward"
                        },
                        new
                        {
                            Id = 4,
                            Address = "789 Main Street",
                            FirstName = "Will",
                            IdentityUserId = "dbc40bc6-8910-4ac5-a3ed-180f5e916a5f",
                            LastName = "Ward"
                        },
                        new
                        {
                            Id = 5,
                            Address = "111 Main Street",
                            FirstName = "Braxton",
                            IdentityUserId = "dbc40bc6-1112-4ac5-a3ed-180f5e916a5f",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 6,
                            Address = "112 Main Street",
                            FirstName = "Baker",
                            IdentityUserId = "dbc40bc6-1314-4ac5-a3ed-180f5e916a5f",
                            LastName = "Wright"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.HasOne("ShepherdsPies.Models.UserProfile", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId");

                    b.HasOne("ShepherdsPies.Models.UserProfile", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliverer");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.HasOne("ShepherdsPies.Models.Cheese", "Cheese")
                        .WithMany()
                        .HasForeignKey("CheeseId");

                    b.HasOne("ShepherdsPies.Models.Order", "Order")
                        .WithMany("OrderPizzas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Sauce", "Sauce")
                        .WithMany()
                        .HasForeignKey("SauceId");

                    b.HasOne("ShepherdsPies.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.Navigation("Cheese");

                    b.Navigation("Order");

                    b.Navigation("Sauce");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ShepherdsPies.Models.PizzaTopping", b =>
                {
                    b.HasOne("ShepherdsPies.Models.Pizza", "Pizza")
                        .WithMany("PizzaToppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.Navigation("OrderPizzas");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.Navigation("PizzaToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
